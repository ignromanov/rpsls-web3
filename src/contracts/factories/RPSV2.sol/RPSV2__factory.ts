/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
  BytesLike,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { RPSV2, RPSV2Interface } from "../../RPSV2.sol/RPSV2";

const _abi = [
  {
    constant: true,
    inputs: [
      {
        name: "_c1",
        type: "uint8",
      },
      {
        name: "_c2",
        type: "uint8",
      },
    ],
    name: "win",
    outputs: [
      {
        name: "w",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "j2Timeout",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "stake",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "c2",
    outputs: [
      {
        name: "",
        type: "uint8",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "c1Hash",
    outputs: [
      {
        name: "",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_c2",
        type: "uint8",
      },
    ],
    name: "play",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "c1",
    outputs: [
      {
        name: "",
        type: "uint8",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "j2",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "lastAction",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_c1",
        type: "uint8",
      },
      {
        name: "_salt",
        type: "uint256",
      },
    ],
    name: "solve",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "j1",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [],
    name: "j1Timeout",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "TIMEOUT",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        name: "_c1Hash",
        type: "bytes32",
      },
      {
        name: "_j2",
        type: "address",
      },
    ],
    payable: true,
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: "_c1Hash",
        type: "bytes32",
      },
      {
        indexed: false,
        name: "_j2",
        type: "address",
      },
    ],
    name: "GameStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: "_c2",
        type: "uint8",
      },
    ],
    name: "MoveMade",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        name: "_c1",
        type: "uint8",
      },
      {
        indexed: false,
        name: "_salt",
        type: "uint256",
      },
    ],
    name: "GameSolved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "J1TimedOut",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "J2TimedOut",
    type: "event",
  },
] as const;

const _bytecode =
  "0x608060405261012c600555604051604080610c86833981018060405281019080805190602001909291908051906020019092919050505034600481905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160028160001916905550426006819055507fca9b2fd9c692723da4459206d07eebb9a7cb28f5c0c324cc4709713376bc3cb482826040518083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050610b32806101546000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c4395b9146100ca578063294914a41461011f5780633a4b66f11461013657806348e257cb146101615780634d03e3d21461019a57806353a04b05146101cd5780635f57697c146101f057806380985af91461022957806389f71d5314610280578063a5ddec7c146102ab578063c37597c6146102e5578063c83911421461033c578063f56f48f214610353575b600080fd5b3480156100d657600080fd5b50610105600480360381019080803560ff169060200190929190803560ff16906020019092919050505061037e565b604051808215151515815260200191505060405180910390f35b34801561012b57600080fd5b50610134610447565b005b34801561014257600080fd5b5061014b61051e565b6040518082815260200191505060405180910390f35b34801561016d57600080fd5b50610176610524565b6040518082600581111561018657fe5b60ff16815260200191505060405180910390f35b3480156101a657600080fd5b506101af610537565b60405180826000191660001916815260200191505060405180910390f35b6101ee600480360381019080803560ff16906020019092919050505061053d565b005b3480156101fc57600080fd5b50610205610675565b6040518082600581111561021557fe5b60ff16815260200191505060405180910390f35b34801561023557600080fd5b5061023e610688565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561028c57600080fd5b506102956106ae565b6040518082815260200191505060405180910390f35b3480156102b757600080fd5b506102e3600480360381019080803560ff169060200190929190803590602001909291905050506106b4565b005b3480156102f157600080fd5b506102fa6109ff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561034857600080fd5b50610351610a24565b005b34801561035f57600080fd5b50610368610b00565b6040518082815260200191505060405180910390f35b600081600581111561038c57fe5b83600581111561039857fe5b14156103a75760009050610441565b600060058111156103b457fe5b8360058111156103c057fe5b14156103cf5760009050610441565b60028260058111156103dd57fe5b8115156103e657fe5b0660028460058111156103f557fe5b8115156103fe57fe5b0614156104255781600581111561041157fe5b83600581111561041d57fe5b109050610441565b81600581111561043157fe5b83600581111561043d57fe5b1190505b92915050565b6000600581111561045457fe5b600360019054906101000a900460ff16600581111561046f57fe5b14151561047b57600080fd5b600554600654014211151561048f57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051600060405180830381858888f193505050505060006004819055507f09454159d303e875704a49fc76cdfc745c02de480fef03f2e459d4c672124dae60405160405180910390a1565b60045481565b600360019054906101000a900460ff1681565b60025481565b6000600581111561054a57fe5b600360019054906101000a900460ff16600581111561056557fe5b14151561057157600080fd5b6000600581111561057e57fe5b81600581111561058a57fe5b1415151561059757600080fd5b600454341415156105a757600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561060357600080fd5b80600360016101000a81548160ff0219169083600581111561062157fe5b0217905550426006819055507f68ed6d69f5adceb119bb9175a71ec81217cf11d09641e5cf92f3d017f05690e0816040518082600581111561065f57fe5b60ff16815260200191505060405180910390a150565b600360009054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b600060058111156106c157fe5b8260058111156106cd57fe5b141515156106da57600080fd5b600060058111156106e757fe5b600360019054906101000a900460ff16600581111561070257fe5b1415151561070f57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561076a57600080fd5b6002546000191682826040518083600581111561078357fe5b60ff167f0100000000000000000000000000000000000000000000000000000000000000028152600101828152602001925050506040518091039020600019161415156107cf57600080fd5b81600360006101000a81548160ff021916908360058111156107ed57fe5b021790555061080b82600360019054906101000a900460ff1661037e565b15610871576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004546002029081150290604051600060405180830381858888f19350505050506109a6565b61088a600360019054906101000a900460ff168361037e565b156108f157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004546002029081150290604051600060405180830381858888f19350505050506109a5565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051600060405180830381858888f1935050505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051600060405180830381858888f19350505050505b5b60006004819055507f3c040f9a62decbe8042da1b19e29679deb60c19e3c885f94f884e93a1d3ea93a8282604051808360058111156109e157fe5b60ff1681526020018281526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006005811115610a3157fe5b600360019054906101000a900460ff166005811115610a4c57fe5b14151515610a5957600080fd5b6005546006540142111515610a6d57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004546002029081150290604051600060405180830381858888f193505050505060006004819055507f6af7a449348b7d22b6d604e9d63fff388c543dd39ca1f42254f4e4b8758fdb0460405160405180910390a1565b600554815600a165627a7a72305820a0e6c78b32a540ffbea471ef2db706795fd0ff112a7a06a624049b44c54d18060029";

type RPSV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RPSV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RPSV2__factory extends ContractFactory {
  constructor(...args: RPSV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _c1Hash: PromiseOrValue<BytesLike>,
    _j2: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<RPSV2> {
    return super.deploy(_c1Hash, _j2, overrides || {}) as Promise<RPSV2>;
  }
  override getDeployTransaction(
    _c1Hash: PromiseOrValue<BytesLike>,
    _j2: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_c1Hash, _j2, overrides || {});
  }
  override attach(address: string): RPSV2 {
    return super.attach(address) as RPSV2;
  }
  override connect(signer: Signer): RPSV2__factory {
    return super.connect(signer) as RPSV2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RPSV2Interface {
    return new utils.Interface(_abi) as RPSV2Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): RPSV2 {
    return new Contract(address, _abi, signerOrProvider) as RPSV2;
  }
}
