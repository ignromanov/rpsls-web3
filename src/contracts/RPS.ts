/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RPSInterface extends utils.Interface {
  functions: {
    "win(uint8,uint8)": FunctionFragment;
    "j2Timeout()": FunctionFragment;
    "stake()": FunctionFragment;
    "c2()": FunctionFragment;
    "c1Hash()": FunctionFragment;
    "play(uint8)": FunctionFragment;
    "j2()": FunctionFragment;
    "lastAction()": FunctionFragment;
    "solve(uint8,uint256)": FunctionFragment;
    "j1()": FunctionFragment;
    "j1Timeout()": FunctionFragment;
    "TIMEOUT()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "win"
      | "j2Timeout"
      | "stake"
      | "c2"
      | "c1Hash"
      | "play"
      | "j2"
      | "lastAction"
      | "solve"
      | "j1"
      | "j1Timeout"
      | "TIMEOUT"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "win",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "j2Timeout", values?: undefined): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(functionFragment: "c2", values?: undefined): string;
  encodeFunctionData(functionFragment: "c1Hash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "play",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "j2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastAction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "solve",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "j1", values?: undefined): string;
  encodeFunctionData(functionFragment: "j1Timeout", values?: undefined): string;
  encodeFunctionData(functionFragment: "TIMEOUT", values?: undefined): string;

  decodeFunctionResult(functionFragment: "win", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "j2Timeout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "c2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "c1Hash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "play", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "j2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastAction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "solve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "j1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "j1Timeout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TIMEOUT", data: BytesLike): Result;

  events: {};
}

export interface RPS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RPSInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    win(
      _c1: PromiseOrValue<BigNumberish>,
      _c2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { w: boolean }>;

    j2Timeout(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(overrides?: CallOverrides): Promise<[BigNumber]>;

    c2(overrides?: CallOverrides): Promise<[number]>;

    c1Hash(overrides?: CallOverrides): Promise<[string]>;

    play(
      _c2: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    j2(overrides?: CallOverrides): Promise<[string]>;

    lastAction(overrides?: CallOverrides): Promise<[BigNumber]>;

    solve(
      _c1: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    j1(overrides?: CallOverrides): Promise<[string]>;

    j1Timeout(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    TIMEOUT(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  win(
    _c1: PromiseOrValue<BigNumberish>,
    _c2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  j2Timeout(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(overrides?: CallOverrides): Promise<BigNumber>;

  c2(overrides?: CallOverrides): Promise<number>;

  c1Hash(overrides?: CallOverrides): Promise<string>;

  play(
    _c2: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  j2(overrides?: CallOverrides): Promise<string>;

  lastAction(overrides?: CallOverrides): Promise<BigNumber>;

  solve(
    _c1: PromiseOrValue<BigNumberish>,
    _salt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  j1(overrides?: CallOverrides): Promise<string>;

  j1Timeout(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    win(
      _c1: PromiseOrValue<BigNumberish>,
      _c2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    j2Timeout(overrides?: CallOverrides): Promise<void>;

    stake(overrides?: CallOverrides): Promise<BigNumber>;

    c2(overrides?: CallOverrides): Promise<number>;

    c1Hash(overrides?: CallOverrides): Promise<string>;

    play(
      _c2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    j2(overrides?: CallOverrides): Promise<string>;

    lastAction(overrides?: CallOverrides): Promise<BigNumber>;

    solve(
      _c1: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    j1(overrides?: CallOverrides): Promise<string>;

    j1Timeout(overrides?: CallOverrides): Promise<void>;

    TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    win(
      _c1: PromiseOrValue<BigNumberish>,
      _c2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    j2Timeout(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(overrides?: CallOverrides): Promise<BigNumber>;

    c2(overrides?: CallOverrides): Promise<BigNumber>;

    c1Hash(overrides?: CallOverrides): Promise<BigNumber>;

    play(
      _c2: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    j2(overrides?: CallOverrides): Promise<BigNumber>;

    lastAction(overrides?: CallOverrides): Promise<BigNumber>;

    solve(
      _c1: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    j1(overrides?: CallOverrides): Promise<BigNumber>;

    j1Timeout(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    win(
      _c1: PromiseOrValue<BigNumberish>,
      _c2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    j2Timeout(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    c2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    c1Hash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    play(
      _c2: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    j2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastAction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    solve(
      _c1: PromiseOrValue<BigNumberish>,
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    j1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    j1Timeout(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    TIMEOUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
